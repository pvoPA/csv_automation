"""
Exports vulnerability data to CSV on registry image resources in Prisma Cloud.

This script is used to retrieve vulnerability data for registry image resources
and exports it to a CSV file with the following actions,
    - Generate Prisma Token
    - Delete the CSV file if it exists from a previous run
    - Grab registry image scan results
    - For each API call,
        - Flatten vulnerability list for each registry image
        - Write to CSV (Create a CSV directory and file.)

Usage:
    python export_registry_image_vulnerability_csv.py

Options:

Requirements:
    - Python 3.10 or higher
    - .env configured with the following variables,
        - PRISMA_ACCESS_KEY
        - PRISMA_SECRET_KEY

Example:
    python export_registry_image_vulnerability_csv.py

Note:
    This script is meant to be deployed in the following platforms,
        - docker container
            - the app directory
        - azure function
            - the azure-function directory
        - aws lambda function
            - the aws-lambda directory
"""
import os
import json
from helpers import logger
from helpers import prisma_get_registry_image_scan_results
from helpers import generate_prisma_token
from helpers import write_data_to_csv


def etl_registry_image_vulnerability_csv():
    """
    Gets registry image data from Prisma and export to CSV.

    Parameters:
        None

    Returns:
        None

    """
    registry_image_blobstore_vulnerability_csv_name = os.getenv(
        "REGISTRY_IMAGE_VULNERABILITY_CSV_NAME"
    )
    registry_image_blobstore_vulnerability_fields_of_interest = json.loads(
        os.getenv("REGISTRY_IMAGE_VULNERABILITY_FIELDS_OF_INTEREST")
    )
    file_path = f"CSVs/{registry_image_blobstore_vulnerability_csv_name}"
    prisma_access_key = os.getenv("PRISMA_ACCESS_KEY")
    prisma_secret_key = os.getenv("PRISMA_SECRET_KEY")

    registry_image_csv_fields = [
        "osDistroVersion",
        "complianceIssues",
        "exploit",
        "isARM64",
        "vulnerabilityDistribution",
        "cvss",
        "hostname",
        "severity",
        "type",
        "discovered",
        "cause",
        "riskFactors",
        "applicableRules",
        "vulnerabilitiesCount",
        "packages",
        "complianceRiskScore",
        "agentless",
        "packageName",
        "scanTime",
        "firewallProtection",
        "packageCorrelationDone",
        "complianceDistribution",
        "layers",
        "cri",
        "allCompliance",
        "twistlock",
        "binaryPkgs",
        "vulnerabilityRiskScore",
        "scanVersion",
        "hosts",
        "text",
        "id",
        "layerTime",
        "registryType",
        "packageManager",
        "templates",
        "collections",
        "trustStatus",
        "vecStr",
        "complianceIssuesCount",
        "status",
        "title",
        "cve",
        "scanBuildDate",
        "appEmbedded",
        "wildFireUsage",
        "osDistro",
        "cloudMetadata",
        "_id",
        "osDistroRelease",
        "startupBinaries",
        "installedProducts",
        "scanID",
        "published",
        "Secrets",
        "image",
        "applications",
        "link",
        "files",
        "repoTag",
        "creationTime",
        "distro",
        "description",
        "binaries",
        "fixDate",
        "firstScanTime",
        "packageVersion",
        "repoDigests",
        "pushTime",
        "err",
        "functionLayer",
        "history",
        "topLayer",
        "instances",
        "tags",
        "labels",
        "exploits",
        "vulnTagInfos",
    ]

    ###########################################################################
    # Generate Prisma Token

    prisma_token = generate_prisma_token(prisma_access_key, prisma_secret_key)

    ###########################################################################
    # Delete the CSV file if it exists from a previous run

    try:
        os.remove(file_path)
    except FileNotFoundError:
        pass

    ###########################################################################
    # Get hosts from Prisma and write to CSV

    end_of_page = False
    new_file = True
    offset = 0
    page_limit = 50

    while not end_of_page:
        (
            registry_image_response,
            status_code,
        ) = prisma_get_registry_image_scan_results(
            prisma_token, offset=offset, limit=page_limit
        )

        if status_code == 200:
            if registry_image_response:
                ###############################################################
                # Flatten vulnerability list for each blob
                vulnerability_list = list()

                for registry_image in registry_image_response:
                    if "vulnerabilities" in registry_image:
                        if registry_image["vulnerabilities"]:
                            for vuln in registry_image["vulnerabilities"]:
                                # Grab base host information
                                vulnerability_dict = {
                                    key: value
                                    for key, value in registry_image.items()
                                    if (
                                        key
                                        in registry_image_blobstore_vulnerability_fields_of_interest
                                    )
                                }

                                # Add the individual vulnerability information
                                vulnerability_dict.update(
                                    {
                                        key: value
                                        for key, value in vuln.items()
                                        if (
                                            key
                                            in registry_image_blobstore_vulnerability_fields_of_interest
                                        )
                                    }
                                )

                                vulnerability_list.append(vulnerability_dict)

                ###############################################################
                # Write to CSV
                write_data_to_csv(
                    file_path, vulnerability_list, registry_image_csv_fields, new_file
                )
                new_file = False

                offset += page_limit
            else:
                end_of_page = True
                break
        elif status_code == 401:
            logger.error("Prisma token timed out, generating a new one and continuing.")

            prisma_token = generate_prisma_token(prisma_access_key, prisma_secret_key)


if __name__ == "__main__":
    logger.info("Creating registry images vulnerabilities CSV...")

    etl_registry_image_vulnerability_csv()
